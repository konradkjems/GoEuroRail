import React, { useState } from 'react';
import { FormTrip } from "@/types";
import { cities } from "@/lib/cities";
import {
  SparklesIcon,
  ArrowDownTrayIcon,
  ExclamationTriangleIcon
} from "@heroicons/react/24/outline";

interface AIItineraryGeneratorProps {
  trip: FormTrip;
  attractions: Record<string, any[]>;
  getWeatherForStop: (stop: any) => any;
  budgetLevel: string;
}

export default function AIItineraryGenerator({ 
  trip,
  attractions,
  getWeatherForStop,
  budgetLevel
}: AIItineraryGeneratorProps) {
  // State for AI itinerary
  const [itineraryMarkdown, setItineraryMarkdown] = useState<string>('');
  const [isGeneratingItinerary, setIsGeneratingItinerary] = useState(false);
  const [itineraryError, setItineraryError] = useState<string | null>(null);
  const [itineraryGenerated, setItineraryGenerated] = useState(false);
  const [additionalNotes, setAdditionalNotes] = useState('');

  // Generate the AI itinerary
  const generateAIItinerary = async () => {
    try {
      setIsGeneratingItinerary(true);
      setItineraryError(null);
      
      // Collect attractions for each city in the trip
      const tripAttractions: Record<string, any[]> = {};
      trip.stops.forEach(stop => {
        const city = cities.find(c => c.id === stop.cityId);
        if (city) {
          const cityName = city.name;
          tripAttractions[cityName] = attractions[cityName] || [];
        }
      });
      
      // Collect weather info for each city
      const tripWeather: Record<string, any> = {};
      trip.stops.forEach(stop => {
        const city = cities.find(c => c.id === stop.cityId);
        if (city) {
          const cityName = city.name;
          tripWeather[cityName] = getWeatherForStop(stop);
        }
      });
      
      // Call the API to generate the itinerary
      const response = await fetch('/api/ai/generate-itinerary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          trip,
          attractions: tripAttractions,
          weather: tripWeather,
          budgetLevel,
          additionalNotes: additionalNotes.trim() || undefined
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate itinerary');
      }
      
      const data = await response.json();
      setItineraryMarkdown(data.itinerary);
      setItineraryGenerated(true);
    } catch (error) {
      console.error('Error generating itinerary:', error);
      setItineraryError('Failed to generate the itinerary. Please try again later.');
    } finally {
      setIsGeneratingItinerary(false);
    }
  };
  
  // Download the itinerary
  const downloadItinerary = () => {
    if (!itineraryMarkdown) return;
    
    // Convert markdown to HTML for PDF generation
    const markdownToHtml = (markdown: string) => {
      // Simple markdown to HTML conversion
      const html = markdown
        .replace(/# (.*?)$/gm, '<h1>$1</h1>')
        .replace(/## (.*?)$/gm, '<h2>$1</h2>')
        .replace(/### (.*?)$/gm, '<h3>$1</h3>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/- (.*?)$/gm, '<li>$1</li>')
        .replace(/\n\n/g, '<br/><br/>')
        .replace(/\n/g, '<br/>');
      
      return `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>${trip.name || 'Trip'} Itinerary</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
            }
            h1 {
              color: #2A9D8F;
              border-bottom: 2px solid #2A9D8F;
              padding-bottom: 10px;
            }
            h2 {
              color: #264653;
              margin-top: 20px;
            }
            h3 {
              color: #E76F51;
            }
            li {
              margin-bottom: 8px;
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
            }
            .footer {
              text-align: center;
              margin-top: 30px;
              font-size: 0.8em;
              color: #666;
              border-top: 1px solid #ddd;
              padding-top: 20px;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${trip.name || 'Trip'} Itinerary</h1>
            <p>Generated by GoEuroRail Smart Trip Assistant</p>
          </div>
          ${html}
          <div class="footer">
            <p>Created with GoEuroRail AI Itinerary Generator</p>
            <p>Â© ${new Date().getFullYear()} GoEuroRail</p>
          </div>
        </body>
        </html>
      `;
    };
    
    // Convert markdown to HTML
    const htmlContent = markdownToHtml(itineraryMarkdown);
    
    // Use a PDF generation library that works in the browser
    // For this example, we'll use html2pdf.js which needs to be added to the project
    // If html2pdf is not available, this is a fallback that creates an HTML file
    if (typeof window !== 'undefined') {
      try {
        // Dynamic import for html2pdf
        import('html2pdf.js').then((html2pdfModule: any) => {
          // Create an element to render the HTML
          const element = document.createElement('div');
          element.innerHTML = htmlContent;
          document.body.appendChild(element);
          element.style.position = 'absolute';
          element.style.left = '-9999px';
          
          // Generate PDF using a simpler approach to avoid TypeScript errors
          const html2pdf = html2pdfModule.default;
          const opt = {
            margin: [10, 10],
            filename: `${trip.name || 'Trip'}_Itinerary.pdf`,
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2 },
            jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
          };
          
          if (typeof html2pdf === 'function') {
            html2pdf(element, opt)
              .save()
              .then(() => {
                // Remove the element after PDF generation
                document.body.removeChild(element);
              });
          } else {
            console.error('html2pdf is not a function', html2pdf);
            provideHtmlDownload(htmlContent);
          }
        }).catch(error => {
          console.error('Failed to load html2pdf:', error);
          // Fallback to providing HTML file
          provideHtmlDownload(htmlContent);
        });
      } catch (error) {
        console.error('Error generating PDF:', error);
        // Fallback to providing HTML file
        provideHtmlDownload(htmlContent);
      }
    } else {
      // Fallback to providing HTML file for non-browser environments
      provideHtmlDownload(htmlContent);
    }
  };
  
  // Fallback function to download as HTML if PDF generation fails
  const provideHtmlDownload = (htmlContent: string) => {
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    
    // Create a temporary download link
    const a = document.createElement('a');
    a.href = url;
    a.download = `${trip.name || 'Trip'}_Itinerary.html`;
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  // Reset the itinerary
  const resetItinerary = () => {
    setItineraryMarkdown('');
    setItineraryGenerated(false);
    setAdditionalNotes('');
  };

  return (
    <div className="p-4 bg-gray-50 border-t">
      <p className="text-sm text-gray-700 mb-4">
        Generate a comprehensive trip itinerary with DeepSeek AI, including day-by-day plans, 
        restaurant recommendations, cultural tips, and personalized travel advice.
      </p>
      
      {!itineraryGenerated ? (
        <>
          <div className="mb-4">
            <label htmlFor="additional-notes" className="block text-sm font-medium text-gray-700 mb-2">
              Additional Notes (Optional)
            </label>
            <textarea
              id="additional-notes"
              rows={3}
              className="w-full p-2 border border-gray-300 rounded-md text-sm"
              placeholder="Enter any special requests, preferences, or information you'd like to include in your itinerary..."
              value={additionalNotes}
              onChange={(e) => setAdditionalNotes(e.target.value)}
            />
          </div>
          
          <button
            onClick={generateAIItinerary}
            disabled={isGeneratingItinerary}
            className="flex items-center justify-center w-full p-3 bg-[#06D6A0] text-white rounded-md hover:bg-[#05C090] disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isGeneratingItinerary ? (
              <>
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Generating Itinerary...
              </>
            ) : (
              <>
                <SparklesIcon className="h-5 w-5 mr-2" />
                Generate AI Itinerary
              </>
            )}
          </button>
          
          {itineraryError && (
            <div className="mt-4 p-3 bg-red-50 text-red-700 rounded-md text-sm">
              <ExclamationTriangleIcon className="h-5 w-5 inline-block mr-2" />
              {itineraryError}
            </div>
          )}
        </>
      ) : (
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h4 className="font-medium text-[#264653]">Your Generated Itinerary</h4>
            <div className="flex space-x-2">
              <button
                onClick={downloadItinerary}
                className="flex items-center p-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm"
              >
                <ArrowDownTrayIcon className="h-4 w-4 mr-1" />
                Download
              </button>
              <button
                onClick={resetItinerary}
                className="flex items-center p-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 text-sm"
              >
                Reset
              </button>
            </div>
          </div>
          
          <div className="bg-white border rounded-md p-4 max-h-96 overflow-y-auto">
            <div className="prose prose-sm max-w-none prose-headings:text-[#264653] prose-a:text-[#06D6A0]">
              {itineraryMarkdown.split('\n').map((line, i) => {
                // Simple markdown rendering
                if (line.startsWith('# ')) {
                  return <h1 key={i} className="text-xl font-bold mt-4 mb-2">{line.substring(2)}</h1>;
                } else if (line.startsWith('## ')) {
                  return <h2 key={i} className="text-lg font-bold mt-3 mb-2">{line.substring(3)}</h2>;
                } else if (line.startsWith('### ')) {
                  return <h3 key={i} className="text-md font-bold mt-3 mb-1">{line.substring(4)}</h3>;
                } else if (line.startsWith('#### ')) {
                  return <h4 key={i} className="text-sm font-bold mt-2 mb-1">{line.substring(5)}</h4>;
                } else if (line.startsWith('- ')) {
                  return <li key={i} className="ml-4">{line.substring(2)}</li>;
                } else if (line.startsWith('**')) {
                  return <p key={i} className="font-bold">{line}</p>;
                } else if (line === '') {
                  return <br key={i} />;
                } else {
                  return <p key={i}>{line}</p>;
                }
              })}
            </div>
          </div>
          
          <p className="text-xs text-gray-500 italic">
            This itinerary was generated by AI based on your trip details. You can download it as a markdown file.
          </p>
        </div>
      )}
    </div>
  );
} 